import logging
from fastapi import FastAPI, Request, Response
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from aiogram import Bot, Dispatcher, types, F
from config import config
import api_routes
import admin_routes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG if config.debug else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="Telegram Prize Roulette",
    description="–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø—Ä–∏–∑–æ–≤ —á–µ—Ä–µ–∑ Telegram Web App",
    version="1.0.0",
    debug=config.debug
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=config.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/assets", StaticFiles(directory="assets"), name="assets")
templates = Jinja2Templates(directory=".")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.bot_token)
dp = Dispatcher()

# –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting up...")
    webhook_url = f"{config.webhook_url}/webhook"
    webhook_info = await bot.get_webhook_info()
    
    if webhook_info.url != webhook_url:
        logger.info(f"Setting webhook to {webhook_url}")
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True
        )

@app.on_event("shutdown")
async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Shutting down...")
    await bot.session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø—Ä–∏–∑–æ–≤. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üé≤ –û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É",
                        web_app=types.WebAppInfo(url=f"{config.webhook_url}")
                    )]
                ]
            )
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "/help")
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await message.answer(
            "üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É'\n"
            "2. –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã\n"
            "3. –°–æ–±–∏—Ä–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å 2 –ø–æ–ø—ã—Ç–∫–∏ –≤ –¥–µ–Ω—å. –£–¥–∞—á–∏! üçÄ"
        )
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(api_routes.router)
app.include_router(admin_routes.router)

@app.get("/")
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä—É–ª–µ—Ç–∫–æ–π"""
    try:
        return templates.TemplateResponse(
            "index.html",
            {"request": request}
        )
    except Exception as e:
        logger.error(f"Error rendering index page: {e}")
        return Response(
            content="Internal Server Error",
            status_code=500
        )

@app.get("/admin")
async def admin_panel(request: Request):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        return templates.TemplateResponse(
            "admin.html",
            {"request": request}
        )
    except Exception as e:
        logger.error(f"Error rendering admin page: {e}")
        return Response(
            content="Internal Server Error",
            status_code=500
        )

@app.get("/health")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy"}

@app.post("/webhook")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot=bot, update=update)
        return Response(status_code=200)
    except Exception as e:
        logger.error(f"Error in webhook handler: {e}")
        return Response(status_code=500)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=config.host,
        port=config.port,
        reload=config.debug
    )