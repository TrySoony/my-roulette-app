#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""
import os
import sys
import json
import asyncio
from datetime import datetime
import pytest
from fastapi.testclient import TestClient
from main import app
from config import config
from utils import DataManager

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ['BOT_TOKEN'] = '1234567890:ABCdefGHIjklMNOpqrsTUVwxyz'
os.environ['ADMIN_ID'] = '123456789'
os.environ['RENDER_EXTERNAL_URL'] = 'https://test-app.onrender.com'
os.environ['WEBHOOK_SECRET'] = 'test_secret_token_123'
os.environ['MAX_ATTEMPTS'] = '2'
os.environ['DEBUG'] = 'true'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
client = TestClient(app)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_USER_ID = "123456789"
TEST_ADMIN_ID = config.admin_id
TEST_PRIZE = {
    "name": "Test Prize",
    "starPrice": 100,
    "img": "/assets/test_prize.png"
}

# –§–∏–∫—Å—Ç—É—Ä—ã
@pytest.fixture
def test_data_manager():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    test_file = "test_user_data.json"
    manager = DataManager(test_file)
    yield manager
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    if os.path.exists(test_file):
        os.remove(test_file)

@pytest.fixture
def test_user_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "attempts_left": config.max_attempts,
        "gifts": []
    }

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from aiogram import Bot, Dispatcher, types
        print("‚úÖ aiogram –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiogram: {e}")
        return False
    
    try:
        from fastapi import FastAPI
        print("‚úÖ FastAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
        return False
    
    try:
        from flask import Flask
        print("‚úÖ Flask –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Flask: {e}")
        return False
    
    try:
        from PIL import Image
        print("‚úÖ Pillow –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Pillow: {e}")
        return False
    
    return True

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config import config
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Admin ID: {config.admin_id}")
        print(f"   - Webhook URL: {config.webhook_url}")
        print(f"   - Webhook Secret: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if config.webhook_secret else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   - Max Attempts: {config.max_attempts}")
        print(f"   - Debug Mode: {config.debug}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_main_app():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        from main import app, bot, dp
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - FastAPI app: {type(app)}")
        print(f"   - Bot: {type(bot)}")
        print(f"   - Dispatcher: {type(dp)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook –º–∞—Ä—à—Ä—É—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        routes = [route.path for route in app.routes]
        if "/webhook" in routes:
            print("‚úÖ Webhook –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå Webhook –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {routes}")
            return False
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_user_data_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        from main import read_user_data, write_user_data, MAX_ATTEMPTS
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = "999999"
        test_data = {"attempts": 0, "gifts": []}
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        all_data = read_user_data()
        print(f"‚úÖ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_data[test_user_id] = test_data
        write_user_data(all_data)
        print("‚úÖ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è
        all_data = read_user_data()
        if test_user_id in all_data:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        user_info = all_data[test_user_id]
        attempts_left = MAX_ATTEMPTS - user_info.get("attempts", 0)
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del all_data[test_user_id]
        write_user_data(all_data)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_prizes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–∑–æ–≤"""
    print("\nüéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª prizes.js
        if os.path.exists('prizes.js'):
            print("‚úÖ –§–∞–π–ª prizes.js –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –§–∞–π–ª prizes.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
        prize_images = [
            "images/nail_bracelet.png",
            "images/bonded_ring.png", 
            "images/neko_helmet.png",
            "images/diamond_ring.png",
            "images/love_potion.png",
            "images/easter_egg.png",
            "images/light_sword.png"
        ]
        
        missing_images = []
        for img in prize_images:
            if not os.path.exists(img):
                missing_images.append(img)
        
        if missing_images:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {missing_images}")
        else:
            print("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–æ–≤: {e}")
        return False

def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    
    try:
        from main import app
        from fastapi.testclient import TestClient
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        client = TestClient(app)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
        test_data = {
            "update_id": 123456789,
            "message": {
                "message_id": 1,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "testuser"
                },
                "chat": {
                    "id": 123456789,
                    "first_name": "Test",
                    "username": "testuser",
                    "type": "private"
                },
                "date": 1234567890,
                "text": "/start"
            }
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        response = client.post("/webhook", json=test_data)
        print(f"‚úÖ Webhook –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        headers = {"x-telegram-bot-api-secret-token": "test_secret_token_123"}
        response = client.post("/webhook", json=test_data, headers=headers)
        print(f"‚úÖ Webhook –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º: {response.status_code}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install httpx")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    try:
        from main import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        response = client.get("/health")
        print(f"‚úÖ Health check: {response.status_code}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = client.get("/")
        print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {response.status_code}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        response = client.get("/admin")
        print(f"‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {response.status_code}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = client.get("/api/get_user_status?user_id=123456")
        print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

# –¢–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
def test_health_check():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "healthy"}

def test_root_page():
    """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    response = client.get("/")
    assert response.status_code == 200
    assert "text/html" in response.headers["content-type"]

def test_admin_page():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    response = client.get("/admin")
    assert response.status_code == 200
    assert "text/html" in response.headers["content-type"]

# –¢–µ—Å—Ç—ã API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def test_announce_user():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = client.post(
        "/api/user",
        json={"user_id": TEST_USER_ID}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "success"
    assert "user_data" in data

def test_get_user_status():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = client.get(f"/api/get_user_status?user_id={TEST_USER_ID}")
    assert response.status_code == 200
    data = response.json()
    assert "attempts_left" in data
    assert "gifts" in data

def test_spin_roulette():
    """–¢–µ—Å—Ç –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏"""
    response = client.post(
        "/api/spin",
        json={"user_id": TEST_USER_ID}
    )
    assert response.status_code == 200
    data = response.json()
    assert "won_prize" in data
    assert "attempts_left" in data

# –¢–µ—Å—Ç—ã –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ API
def test_admin_add_attempt():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    response = client.post(
        "/api/admin/add_attempt",
        json={
            "user_id": TEST_USER_ID,
            "admin_id": TEST_ADMIN_ID
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert data["success"] is True
    assert "attempts" in data

def test_admin_reset_attempts():
    """–¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–æ–ø—ã—Ç–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    response = client.post(
        "/api/admin/reset_attempts",
        json={
            "user_id": TEST_USER_ID,
            "admin_id": TEST_ADMIN_ID
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert data["success"] is True

def test_admin_add_prize():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    response = client.post(
        "/api/admin/add_prize",
        json={
            "user_id": TEST_USER_ID,
            "admin_id": TEST_ADMIN_ID,
            "prize": TEST_PRIZE
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert data["success"] is True

# –¢–µ—Å—Ç—ã DataManager
def test_data_manager_operations(test_data_manager, test_user_data):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    test_data_manager._save_data({TEST_USER_ID: test_user_data})
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    data = test_data_manager.read_data()
    assert TEST_USER_ID in data
    assert data[TEST_USER_ID]["attempts_left"] == config.max_attempts
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    def update_func(user_info):
        user_info["attempts_left"] -= 1
        return user_info
    
    updated_data = test_data_manager.update_user_data(TEST_USER_ID, update_func)
    assert updated_data["attempts_left"] == config.max_attempts - 1
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
    test_data_manager.add_gift(TEST_USER_ID, TEST_PRIZE, config.max_attempts)
    data = test_data_manager.read_data()
    assert len(data[TEST_USER_ID]["gifts"]) == 1
    assert data[TEST_USER_ID]["gifts"][0]["name"] == TEST_PRIZE["name"]
    
    # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
    updated_data = test_data_manager.remove_gift(TEST_USER_ID, 0)
    assert len(updated_data["gifts"]) == 0

def test_invalid_user_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = client.post(
        "/api/user",
        json={"user_id": "invalid_id"}
    )
    assert response.status_code == 400
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = client.post("/api/user", json={})
    assert response.status_code == 400

def test_invalid_admin_operations():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    response = client.post(
        "/api/admin/add_attempt",
        json={
            "user_id": TEST_USER_ID,
            "admin_id": 999999
        }
    )
    assert response.status_code == 403
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    response = client.post("/api/admin/add_attempt", json={})
    assert response.status_code == 400

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("\n‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not test_config():
        print("\n‚ùå –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not test_main_app():
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not test_user_data_functions():
        print("\n‚ùå –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–∑—ã
    if not test_prizes():
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–∏–∑–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç
    if not test_webhook_endpoint():
        print("\n‚ùå –¢–µ—Å—Ç webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if not test_api_endpoints():
        print("\n‚ùå –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ Render:")
    print("      - BOT_TOKEN")
    print("      - ADMIN_ID") 
    print("      - WEBHOOK_SECRET")
    print("      - MAX_ATTEMPTS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)")
    print("   2. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Render")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    print("   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /admin")

if __name__ == "__main__":
    pytest.main(["-v", "--cov=.", "test_all.py"]) 